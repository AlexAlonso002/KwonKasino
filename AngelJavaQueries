import java.sql.*;

public class ComplexQueries {

    public static void main(String[] args) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            // Establishing a database connection to MySQL
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/Project", "root", "Amadrid7!");
            System.out.println("DB connection is successful");

            // Creating a statement object to execute SQL queries
            stmt = conn.createStatement();

            // 1. Get the monthly revenue of each game area
            String queryA = "SELECT " +
                            "  ga.AreaName, " +
                            "  DATE_FORMAT(p.GameDate, '%Y-%m') AS Month, " +
                            "  SUM(p.Bet) AS MonthlyRevenue " +
                            "FROM PlayedGames p " +
                            "JOIN Games g ON p.GameID = g.GameID " +
                            "JOIN GameArea ga ON g.AreaID = ga.AreaID " +
                            "GROUP BY ga.AreaName, DATE_FORMAT(p.GameDate, '%Y-%m') " +
                            "ORDER BY ga.AreaName, Month;";
            rs = stmt.executeQuery(queryA);
            System.out.println("Monthly Revenue by Game Area:");
            while (rs.next()) {
                System.out.println("Area Name: " + rs.getString("AreaName") +
                                   ", Month: " + rs.getString("Month") +
                                   ", Monthly Revenue: " + rs.getDouble("MonthlyRevenue"));
            }
            rs.close();

            // 2. Create a view that provides a summary of customer activity and revenue by game area
            String queryB = "CREATE OR REPLACE VIEW CustomerActivitySummary AS " +
                            "SELECT " +
                            "  ga.AreaName, " +
                            "  c.FirstName, " +
                            "  c.LastName, " +
                            "  c.CustomerID, " +
                            "  SUM(p.Bet) AS TotalBets, " +
                            "  SUM(p.Cashout) AS TotalCashout, " +
                            "  SUM(p.Bet - p.Cashout) AS TotalWinnings, " +
                            "  COUNT(p.PlayedGameID) AS TotalGamesPlayed " +
                            "FROM Customers c " +
                            "JOIN PlayedGames p ON c.CustomerID = p.CustomerID " +
                            "JOIN Games g ON p.GameID = g.GameID " +
                            "JOIN GameArea ga ON g.AreaID = ga.AreaID " +
                            "GROUP BY ga.AreaName, c.CustomerID " +
                            "ORDER BY TotalWinnings DESC " +
                            "LIMIT 5;";
            stmt.executeUpdate(queryB);
            System.out.println("\nCustomer Activity Summary view created successfully.");

            // Display the contents of the CustomerActivitySummary view
            String queryView = "SELECT * FROM CustomerActivitySummary;";
            rs = stmt.executeQuery(queryView);
            System.out.println("\nCustomer Activity Summary View:");
            while (rs.next()) {
                System.out.println("Area Name: " + rs.getString("AreaName") +
                                   ", First Name: " + rs.getString("FirstName") +
                                   ", Last Name: " + rs.getString("LastName") +
                                   ", Customer ID: " + rs.getInt("CustomerID") +
                                   ", Total Bets: " + rs.getDouble("TotalBets") +
                                   ", Total Cashout: " + rs.getDouble("TotalCashout") +
                                   ", Total Winnings: " + rs.getDouble("TotalWinnings") +
                                   ", Total Games Played: " + rs.getInt("TotalGamesPlayed"));
            }
            rs.close();

            // 3. Get a list of all employees, their game area, and the number of support tickets they have helped with
            String queryC = "SELECT " +
                            "  e.FirstName, e.LastName, e.AreaID, ga.AreaName, " +
                            "  COUNT(st.EmployeeHelper) AS TicketsHelped " +
                            "FROM Employees e " +
                            "LEFT JOIN GameArea ga ON e.AreaID = ga.AreaID " +
                            "LEFT JOIN Support_Tickets st ON e.EmployeeID = st.EmployeeHelper " +
                            "GROUP BY e.EmployeeID " +
                            "ORDER BY TicketsHelped DESC " +
                            "LIMIT 5;";
            rs = stmt.executeQuery(queryC);
            System.out.println("\nEmployees and Support Tickets Helped:");
            while (rs.next()) {
                System.out.println("Employee: " + rs.getString("FirstName") + " " + rs.getString("LastName") +
                                   ", Area: " + rs.getString("AreaName") +
                                   ", Tickets Helped: " + rs.getInt("TicketsHelped"));
            }
            rs.close();

        } catch (SQLException e) {
            // Handling SQL exceptions
            System.out.println("Error: " + e.getMessage());
        } finally {
            // Closing resources
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                System.out.println("Error while closing resources: " + e.getMessage());
            }
        }
    }
}
